#include "ros/ros.h"
#include "try_ros_service_and_client/kan_pick.h"

#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <moveit_visual_tools/moveit_visual_tools.h>
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose.h>

static const std::string PLANNING_GROUP_ARM = "arm";
static const std::string APP_DIRECTORY_NAME = ".cr3_simulation";
const double tau = 2 * M_PI;
static const std::vector<double> OBJECT_POSITION = {0.5, 0, 0.5};

class PickService{
private:
  ros::Publisher pub;
  ros::Subscriber sub;
  ros::Service ser;
  ros::NodeHandle node_handle;
  geometry_msgs::Pose::ConstPtr goal_pose;
public:
  PickService()
  {
    //Initialized node
    ser = node_handle.advertiseService("pick_service", );
    pub = node_handle.advertise<std_msgs::Bool>("/gripper_command", 10);
    
  }

  void grasp_pose_receive_server(){
  };
  
};

class Compute_Grasp: public 

int main(int argc, char** argv[]){
  ros::init(argc, argv, "pick_success_server");
  ros::AsyncSpinner spinner(0);
  spinner.start();

  ros::spin();


  return 0;
}
